


local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
    vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    wait(1)
    vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
 




local players = game:GetService("Players")
local lplr = players.LocalPlayer
local oldchar = lplr.Character
local cam = workspace.CurrentCamera
local uis = game:GetService("UserInputService")
local KnitClient = debug.getupvalue(require(game.Players.LocalPlayer.PlayerScripts.TS.knit).setup, 6)
local Client = require(game:GetService("ReplicatedStorage").TS.remotes).default.Client
local InventoryUtil = require(game:GetService("ReplicatedStorage").TS.inventory["inventory-util"]).InventoryUtil
local itemstuff = debug.getupvalue(require(game:GetService("ReplicatedStorage").TS.item["item-meta"]).getItemMeta, 1)
local RenderStepTable = {}
local StepTable = {}
local connectioninfjump
local killauraswing = {["Enabled"] = true}
local killaurasound = {["Enabled"] = true}
local killaurahitdelay = {["Value"] = 2}
local killaurasoundval = {["Value"] = 1}
local speedval = {["Value"] = 35}
local testtogttt = {["Value"] = 20}
local ACC1
local ACC2
local antivoidtransparent = {["Value"] = 50}
local antivoidcolor = {["Hue"] = 0.93, ["Sat"] = 1, ["Value"] = 1}
local reachval = {["Value"] = 18}
local autoclick = {["Enabled"] = true}
local origC0 = game.ReplicatedStorage.Assets.Viewmodel.RightHand.RightWrist.C0
local killaurafirstpersonanim = {["Value"] = true}
local killauraanimval = {["Value"] = "Cool"}

local SprintCont = KnitClient.Controllers.SprintController
local SwordCont = KnitClient.Controllers.SwordController
local KnockbackTable = debug.getupvalue(require(game:GetService("ReplicatedStorage").TS.damage["knockback-util"]).KnockbackUtil.calculateKnockbackVelocity, 1)
local ClientHandler = Client

local function GetURL(scripturl)
	return game:HttpGet("https://raw.githubusercontent.com/7GrandLittleBrother/SytroNight4ROBLOX/main/"..scripturl, true)
end

local function isAlive(plr)
	if plr then
		return plr and plr.Character and plr.Character.Parent ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Head") and plr.Character:FindFirstChild("Humanoid")
	end
	return lplr and lplr.Character and lplr.Character.Parent ~= nil and lplr.Character:FindFirstChild("HumanoidRootPart") and lplr.Character:FindFirstChild("Head") and lplr.Character:FindFirstChild("Humanoid")
end

local function runcode(func)
	func()
end

local function playsound(id, volume) 
	local sound = Instance.new("Sound")
	sound.Parent = workspace
	sound.SoundId = id
	sound.PlayOnRemove = true 
	if volume then 
		sound.Volume = volume
	end
	sound:Destroy()
end

local function playanimation(id) 
	if isAlive() then 
		local animation = Instance.new("Animation")
		animation.AnimationId = id
		local animatior = lplr.Character.Humanoid.Animator
		animatior:LoadAnimation(animation):Play()
	end
end

function isNumber(str)
	if tonumber(str) ~= nil or str == 'inf' then
		return true
	end
end

function getinv(plr)
	local plr = plr or lplr
	local thingy, thingytwo = pcall(function() return InventoryUtil.getInventory(plr) end)
	return (thingy and thingytwo or {
		items = {},
		armor = {},
		hand = nil
	})
end


function getsword()
	local sd
	local higherdamage
	local swordslots
	local swords = getinv().items
	for i, v in pairs(swords) do
		if v.itemType:lower():find("sword") or v.itemType:lower():find("blade") then
			if higherdamage == nil or itemstuff[v.itemType].sword.damage > higherdamage then
				sd = v
				higherdamage = itemstuff[v.itemType].sword.damage
				swordslots = i
			end
		end
	end
	return sd, swordslots
end





local function getremote(tab)
	for i,v in pairs(tab) do
		if v == "Client" then
			return tab[i + 1]
		end
	end
	return ""
end

local function hvFunc(cock)
	return {hashedval = cock}
end

local function targetCheck(plr, check)
	return (check and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("ForceField") == nil or check == false)
end

local function isPlayerTargetable(plr, target)
	return plr ~= lplr and plr and isAlive(plr) and targetCheck(plr, target)
end

local function GetAllNearestHumanoidToPosition(distance, amount)
	local returnedplayer = {}
	local currentamount = 0
	if entity.isAlive then -- alive check
		for i, v in pairs(game.Players:GetChildren()) do -- loop through players
			if isPlayerTargetable((v), true, true, v.Character ~= nil) and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Head") and currentamount < amount then -- checks
				local mag = (lplr.Character.HumanoidRootPart.Position - v.Character:FindFirstChild("HumanoidRootPart").Position).magnitude
				if mag <= distance then -- mag check
					table.insert(returnedplayer, v)
					currentamount = currentamount + 1
				end
			end
		end
		for i2,v2 in pairs(game:GetService("CollectionService"):GetTagged("Monster")) do -- monsters
			if v2:FindFirstChild("HumanoidRootPart") and currentamount < amount and v2.Name ~= "Duck" then -- no duck
				local mag = 
(lplr.Character.HumanoidRootPart.Position - v.Character:FindFirstChild("HumanoidRootPart").Position).magnitude
				if mag <= distance then -- mag check
					table.insert(returnedplayer, v)
					currentamount = currentamount + 1
				end
			end
		end
		for i2,v2 in pairs(game:GetService("CollectionService"):GetTagged("Monster")) do -- monsters
			if v2:FindFirstChild("HumanoidRootPart") and currentamount < amount and v2.Name ~= "Duck" then -- no duck
				local mag = (lplr.Character.HumanoidRootPart.Position - v2.HumanoidRootPart.Position).magnitude
				if mag <= distance then -- magcheck
					table.insert(returnedplayer, {Name = (v2 and v2.Name or "Monster"), UserId = 1443379645, Character = v2}) -- monsters are npcs so I have to create a fake player for target info
					currentamount = currentamount + 1
				end
			end
		end
	end
	return returnedplayer -- table of attackable entities
end

local function BindToRenderStep(name, num, func)
	if RenderStepTable[name] == nil then
		RenderStepTable[name] = game:GetService("RunService").RenderStepped:connect(func)
	end
end
local function UnbindFromRenderStep(name)
	if RenderStepTable[name] then
		RenderStepTable[name]:Disconnect()
		RenderStepTable[name] = nil
	end
end

local function BindToStepped(name, num, func)
	if StepTable[name] == nil then
		StepTable[name] = game:GetService("RunService").Stepped:connect(func)
	end
end
local function UnbindFromStepped(name)
	if StepTable[name] then
		StepTable[name]:Disconnect()
		StepTable[name] = nil
	end
end

local attackentitycont = Client:Get(getremote(debug.getconstants(getmetatable(KnitClient.Controllers.SwordController)["attackEntity"])))
local rgfejd = false
local DistVal = {["Value"] = 18}
function KillauraRemote()
	for i,v in pairs(game.Players:GetChildren()) do
		if v.Character and v.Name ~= game.Players.LocalPlayer.Name and v.Character:FindFirstChild("HumanoidRootPart") then
			local mag = (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
			if mag <= DistVal["Value"] and v.Team ~= game.Players.LocalPlayer.Team and v.Character:FindFirstChild("Humanoid") then
				if v.Character.Humanoid.Health > 0 then
					rgfejd = true
					local GBW = getsword()
					local selfPosition = lplr.Character.HumanoidRootPart.Position + (DistVal["Value"] > 14 and (lplr.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude > 14 and (CFrame.lookAt(lplr.Character.HumanoidRootPart.Position, v.Character.HumanoidRootPart.Position).lookVector * 4) or Vector3.new(0, 0, 0))
					local Entity = v.Character
					local target = v.Character:GetPrimaryPartCFrame().Position
					attackentitycont:CallServer({
						["chargedAttack"] = {["chargeRatio"] = 1},
						["weapon"] = GBW ~= nil and GBW.tool,
						["entityInstance"] = Entity,
						["validate"] = {["targetPosition"] = {["value"] = target,
							["hash"] = hvFunc(target)},
						["raycast"] = {
							["cameraPosition"] = hvFunc(cam.CFrame.Position), 
							["cursorDirection"] = hvFunc(Ray.new(cam.CFrame.Position, v.Character:GetPrimaryPartCFrame().Position).Unit.Direction)
						},
						["selfPosition"] = {["value"] = selfPosition,
							["hash"] = hvFunc(selfPosition)
						}
						}
					})
					if killaurasound["Enabled"] then
						playsound("rbxassetid://6760544639", killaurasoundval["Value"])
					end
					if killauraswing["Enabled"] then
						playanimation("rbxassetid://4947108314")
					end
				end
			else
				rgfejd = false
			end
		end
	end
end

local itemtab = debug.getupvalue(require(game:GetService("ReplicatedStorage").TS.item["item-meta"]).getItemMeta, 1)
local CombatConstant = require(game:GetService("ReplicatedStorage").TS.combat["combat-constant"]).CombatConstant
local function getEquipped()
	local typetext = ""
	local obj = (entity.isAlive and lplr.Character:FindFirstChild("HandInvItem") and lplr.Character.HandInvItem.Value or nil)
	if obj then
		if obj.Name:find("sword") or obj.Name:find("blade") or obj.Name:find("baguette") or obj.Name:find("scythe") or obj.Name:find("dao") then
			typetext = "sword"
		end
		if obj.Name:find("wool") or itemtab[obj.Name]["block"] then
			typetext = "block"
		end
		if obj.Name:find("bow") then
			typetext = "bow"
		end
	end
	return {["Object"] = obj, ["Type"] = typetext}
end


function getbeds()
	local beds = {}
	local blocks = game:GetService("Workspace").Map.Blocks
	for _,Block in pairs(blocks:GetChildren()) do
		if Block.Name == "bed" and Block.Covers.BrickColor ~= game.Players.LocalPlayer.Team.TeamColor then
			table.insert(beds,Block)
		end
	end
	return beds
end

function getbedsblocks()
	local blockstb = {}
	local blocks = game:GetService("Workspace").Map.Blocks
	for i,v in pairs(blocks:GetChildren()) do
		if v:IsA("Part") then
			table.insert(blockstb,v)
		end
	end
	return blockstb
end

function blocks(bed)
	local aboveblocks = 0
	local Blocks = getbedsblocks()
	for _,Block in pairs(Blocks) do
		if Block.Position.X == bed.X and Block.Position.Z == bed.Z and Block.Name ~= "bed" and (Block.Position.Y - bed.Y) <= 9 and Block.Position.Y > bed.Y then
			aboveblocks = aboveblocks + 1
		end
	end
	return aboveblocks
end

function nuker()
	local beds = getbeds()
	for _,bed in pairs(beds) do
		local bedmagnitude = (bed.Position - game.Players.LocalPlayer.Character.PrimaryPart.Position).Magnitude
		if bedmagnitude < 27 then
			local upnum = blocks(bed.Position)
			local x = math.round(bed.Position.X/3)
			local y = math.round(bed.Position.Y/3) + upnum
			local z = math.round(bed.Position.Z/3)
			game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.DamageBlock:InvokeServer({
				["blockRef"] = {
					["blockPosition"] = Vector3.new(x,y,z)
				},
				["hitPosition"] = Vector3.new(x,y,z),
				["hitNormal"] = Vector3.new(x,y,z),
			})
		end
	end
end
















local ScreenGui = Instance.new("ScreenGui")
local movementwindow = Instance.new("Frame")
local Container = Instance.new("Frame")
local UIGridLayout = Instance.new("UIGridLayout")

--toggles and buttons
local fly = Instance.new("TextButton")
local speed = Instance.new("TextButton")
local Gravity = Instance.new("TextButton")
local Antiaim = Instance.new("TextButton")


local TextLabel = Instance.new("TextLabel")

-- toggles operator
local flyB = false
local GravityB = false
local AntiAB = false
local speedB = false


ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")


--entity
local entity = loadstring(game:HttpGet("https://raw.githubusercontent.com/7GrandDadPGN/VapeV4ForRoblox/main/Libraries/entityHandler.lua", true))()

do
	local oldcharacteradded = entity.characterAdded
	entity.characterAdded = function(plr, char, localcheck)
		return oldcharacteradded(plr, char, localcheck, function() end)
	end
	entity.fullEntityRefresh()
end

movementwindow.Name = "movement window"
movementwindow.Parent = ScreenGui
movementwindow.BackgroundColor3 = Color3.fromRGB(4, 4, 4)
movementwindow.BackgroundTransparency = 0.100
movementwindow.BorderSizePixel = 0
movementwindow.Position = UDim2.new(0.22771959, 0, 0, 0)
movementwindow.Size = UDim2.new(0, 142, 0, 39)

Container.Name = "Container"
Container.Parent = movementwindow
Container.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Container.BackgroundTransparency = 777.000  
Container.BorderSizePixel = 0
Container.Position = UDim2.new(0, 0, 1, 0)
Container.Size = UDim2.new(0, 142, 0, 447)

UIGridLayout.Parent = Container
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIGridLayout.CellPadding = UDim2.new(0, 5, 0, 0)
UIGridLayout.CellSize = UDim2.new(0, 142, 0, 40)


--togles and button stuff
fly.Name = "fly"
fly.Parent = Container
fly.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
fly.BackgroundTransparency = 0.300
fly.BorderSizePixel = 0
fly.Size = UDim2.new(0, 200, 0, 50)
fly.Font = Enum.Font.SourceSans
fly.Text = "Fly"                                              
fly.TextColor3 = Color3.fromRGB(255, 255, 255)
fly.TextSize = 25.000
fly.TextStrokeTransparency = 0.000


fly.MouseButton1Click:Connect(function()


    if flyB == false then
        flyB = true
    
        fly.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        fly.BackgroundTransparency = 0.000
        fly.TextColor3 = Color3.fromRGB(0, 0, 0)
    
        getgenv().HopDelay = 20 -- Default Value = 20
    getgenv().Boost = true -- Default Value = true
    getgenv().BoostStuds = 0.4--Default Value = 0.2
    getgenv().HopBoost = true -- Default Value = true
    getgenv().HopBoostStuds = 1.5-- Default Value = 1.5
    
    -- Main
    
    if not getgenv().BedwarsHopToggled then
        getgenv().BedwarsHopToggled = true
    else
        return
    end
    local UIS = game:GetService("UserInputService")
    local Toggled = false
    
    UIS.InputBegan:Connect(function(Key, Event)
        if Event then return end
        if Key.UserInputType == Enum.UserInputType.Keyboard then
            if Key.KeyCode == Enum.KeyCode.Z then
                Toggled = not Toggled
                local CHead = game.Players.LocalPlayer.Character.Head.Position
                local CY = game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y
                local i = 0
                local UpDebounce = 0
                local DownDebounce = 0
                
                if Toggled then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(Vector3.new(0, 1, 0))
                end
                while Toggled do
                    game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
                    i = i + 1
                    
                    local AntiFall = Instance.new("Part", game.Workspace)
                    local Mark = Instance.new("Part", game.Workspace)
                    AntiFall.Name = "CollidePart"
                    Mark.Name = "Mark"
                    AntiFall.Anchored = true
                    Mark.Anchored = true
                    AntiFall.Size = Vector3.new(3, 1, 3)
                    Mark.Size = Vector3.new(3, 0.01, 3)
                    AntiFall.Position = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X, CY - 3.499, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z)
                    Mark.Position = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X, CHead.Y, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z) + Vector3.new(0, 1, 0)
                    AntiFall.Material = Enum.Material.Neon
                    Mark.Material = Enum.Material.Neon
                    AntiFall.BrickColor = BrickColor.new("Really blue")
                    if Mark.Position.Y > game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y then
                        Mark.BrickColor = BrickColor.new("Lime green")
                    else
                        Mark.BrickColor = BrickColor.new("Really red")
                    end
                    Mark.CanCollide = false
                    
                    if i <= getgenv().HopDelay / 2 and getgenv().Boost then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(Vector3.new(0, 0, -getgenv().BoostStuds))
                    end
                    
                    if i >= getgenv().HopDelay then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(Vector3.new(0, 1, 0))
                        if getgenv().HopBoost then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(Vector3.new(0, 0, -getgenv().HopBoostStuds))
                        end
                        i = 0
                    end
                    if UIS:IsKeyDown(Enum.KeyCode.Space) then
                        UpDebounce = UpDebounce + 1
                        i = getgenv().HopDelay - 5
                        if UpDebounce >= 5 then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(Vector3.new(0, 3, 0))
                            CY = CY + 3
                            UpDebounce = 0
                        else
                            CY = CY - 0.1
                        end
                    end
                    if UIS:IsKeyDown(Enum.KeyCode.LeftShift) then
                        if CY >= game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y - 5 then
                            DownDebounce = DownDebounce + 1
                            i = getgenv().HopDelay - 5
                            if DownDebounce >= 5 then
                                --game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(Vector3.new(0, -3, 0))
                                CY = CY - 3
                                DownDebounce = 0
                            else
                                CY = CY + 0.1
                            end
                        end
                    end
                    
                    wait()
                    AntiFall:Destroy()
                    Mark:Destroy()
                end
                game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
            end
        end
    end)
    
    else
    
        flyB = false
        
        fly.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
        fly.BackgroundTransparency = 0.200
        fly.TextColor3 = Color3.fromRGB(255, 255, 255)
    end
    end)
    

speed.Name = "speed"
speed.Parent = Container
speed.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
speed.BackgroundTransparency = 0.300
speed.BorderSizePixel = 0
speed.Size = UDim2.new(0, 200, 0, 50)
speed.Font = Enum.Font.SourceSans
speed.Text = "Speed-Beta"
speed.TextColor3 = Color3.fromRGB(255, 255, 255)
speed.TextSize = 25.000
speed.TextStrokeTransparency = 0.000

speed.MouseButton1Click:Connect(function()
    if speedB == false then
        speedB = true

        speed.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        speed.BackgroundTransparency = 0.000
        speed.TextColor3 = Color3.fromRGB(0, 0, 0)
        --retarded script
        BindToStepped("CFrameWalkSpeed", 1, function(time, delta)
			if entity.isAlive then
				local newpos = (lplr.Character.Humanoid.MoveDirection  * (speedval["Value"] - lplr.Character.Humanoid.WalkSpeed)) * delta

				local raycastparameters = RaycastParams.new()
				raycastparameters.FilterDescendantsInstances = {lplr.Character}
				local ray = workspace:Raycast(lplr.Character.HumanoidRootPart.Position, newpos, raycastparameters)
				if ray then newpos = (ray.Position - lplr.Character.HumanoidRootPart.Position) end
				lplr.Character.HumanoidRootPart.CFrame = lplr.Character.HumanoidRootPart.CFrame + newpos
			end
        end)

else
    speedB = false
    
    speed.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
    speed.BackgroundTransparency = 0.200
    speed.TextColor3 = Color3.fromRGB(255, 255, 255)


    --script
    UnbindFromStepped("CFrameWalkSpeed")


    end
    
end)



Gravity.Name = "Gravity"
Gravity.Parent = Container
Gravity.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Gravity.BackgroundTransparency = 0.300
Gravity.BorderSizePixel = 0
Gravity.Size = UDim2.new(0, 200, 0, 50)
Gravity.Font = Enum.Font.SourceSans
Gravity.Text = "Gravity"
Gravity.TextColor3 = Color3.fromRGB(255, 255, 255)
Gravity.TextSize = 25.000
Gravity.TextStrokeTransparency = 0.000

Antiaim.Name = "Antiaim"
Antiaim.Parent = Container
Antiaim.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Antiaim.BackgroundTransparency = 0.300
Antiaim.BorderSizePixel = 0
Antiaim.Size = UDim2.new(0, 200, 0, 50)
Antiaim.Font = Enum.Font.SourceSans
Antiaim.Text = "Antiaim"
Antiaim.TextColor3 = Color3.fromRGB(255, 255, 255)
Antiaim.TextSize = 25.000
Antiaim.TextStrokeTransparency = 0.000



TextLabel.Parent = movementwindow
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.Position = UDim2.new(0.0704225302, 0, 0.205127954, 0)
TextLabel.Size = UDim2.new(0, 122, 0, 22)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.Text = "Movement"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 30.000
TextLabel.TextStrokeTransparency = 0.000
